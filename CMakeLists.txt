# STM32 Minimal CMake project for C/maC++ projects
cmake_minimum_required(VERSION 3.12)

###############################################################################
# Set project name and source code folder location
project(NRS_FC)
set(PROJECT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Project)

set(CMAKE_GENERATOR "MinGW Makefiles")

option(DUMP_ASM "Create full assembly of final executable" OFF)
# Set microcontroller information
set(MCU_FAMILY STM32F4xx)
set(MCU_MODEL STM32F407xx)
set(CPU_PARAMETERS
    -mcpu=cortex-m4
    -mthumb
    -mfpu=fpv4-sp-d16
    -mfloat-abi=hard)

set(STARTUP_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/startup_stm32f407xx.s)
set(MCU_LINKER_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/STM32F407VETx_FLASH.ld)

###############################################################################
set(EXECUTABLE ${CMAKE_PROJECT_NAME})

enable_language(C CXX ASM)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS ON)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)



###############################################################################
set(STM32CUBEMX_INCLUDE_DIRECTORIES
    ${CMAKE_CURRENT_SOURCE_DIR}/Core/Inc
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/${MCU_FAMILY}_HAL_Driver/Inc
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/${MCU_FAMILY}_HAL_Driver/Inc/Legacy
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/CMSIS/Device/ST/${MCU_FAMILY}/Include
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/CMSIS/Include)

set(PROJECT_INCLUDE_DIRECTORIES 
    ${CMAKE_CURRENT_SOURCE_DIR})


set(AZURE_INCLUDE_DIRECTORIES
    ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/ST/threadx/common/inc
    ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/ST/threadx/ports/cortex_m4/gnu/inc
    ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/ST/filex/common/inc
    ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/ST/filex/ports/generic/inc
    ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/ST/netxduo/common/inc
    ${CMAKE_CURRENT_SOURCE_DIR}/FileX/App
    ${CMAKE_CURRENT_SOURCE_DIR}/NetXDuo/App
    ${CMAKE_CURRENT_SOURCE_DIR}/AZURE_RTOS/App
    )

set(HAM_INCLUDE_DIRECTORIES
    ${CMAKE_CURRENT_SOURCE_DIR}/HAM/
    ${CMAKE_CURRENT_SOURCE_DIR}/HAM/Uart
    ${CMAKE_CURRENT_SOURCE_DIR}/HAM/Gpio
    ${CMAKE_CURRENT_SOURCE_DIR}/HAM/Printer
    ${CMAKE_CURRENT_SOURCE_DIR}/HAM/Debug
    ${CMAKE_CURRENT_SOURCE_DIR}/HAM/I2C
    ${CMAKE_CURRENT_SOURCE_DIR}/HAM/SHT30
    ${CMAKE_CURRENT_SOURCE_DIR}/HAM/Common
    )



file(GLOB_RECURSE STM32CUBEMX_SOURCES CONFIGURE_DEPENDS
    ${CMAKE_CURRENT_SOURCE_DIR}/Core/*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/*.c)

file(GLOB_RECURSE PROJECT_SOURCES CONFIGURE_DEPENDS
    ${PROJECT_DIR}/*.cpp
    ${PROJECT_DIR}/*.c)

file(GLOB_RECURSE HAM_SOURCES CONFIGURE_DEPENDS
    ${CMAKE_CURRENT_SOURCE_DIR}/HAM/*.cpp)

file(GLOB_RECURSE AZURE_SOURCES CONFIGURE_DEPENDS
    ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/*.S
    ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/ST/threadx/common/src/*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/ST/threadx/ports/cortex_m4/gnu/src/*.S
    ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/ST/netxduo/common/src/*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/ST/filex/common/src*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/AZURE_RTOS/App/*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/FileX/App/*.c
    # ${CMAKE_CURRENT_SOURCE_DIR}/ports/cortex_m4/gnu/src/*.cpp
    )
    
add_compile_options($<$<COMPILE_LANGUAGE:ASM>:-x$<SEMICOLON>assembler-with-cpp>)

add_executable(${EXECUTABLE}
    ${STARTUP_SCRIPT}
    ${STM32CUBEMX_SOURCES}
    ${AZURE_SOURCES} 
    ${HAM_SOURCES} 
    ${PROJECT_SOURCES}
    )

target_compile_definitions(${EXECUTABLE} PRIVATE
    #$<$<CONFIG:Debug>:DEBUG>
    ${MCU_MODEL}
    USE_HAL_DRIVER)

target_include_directories(${EXECUTABLE} SYSTEM PRIVATE
    ${STM32CUBEMX_INCLUDE_DIRECTORIES})
    
target_include_directories(${EXECUTABLE} SYSTEM PRIVATE
    ${AZURE_INCLUDE_DIRECTORIES})

target_include_directories(${EXECUTABLE} PRIVATE
    ${HAM_INCLUDE_DIRECTORIES})



target_include_directories(${EXECUTABLE} PRIVATE
    ${PROJECT_INCLUDE_DIRECTORIES})
###############################################################################
target_compile_options(${EXECUTABLE} PRIVATE
${CPU_PARAMETERS}
    -Wall
    -Wextra
    -Wpedantic
    -Wshadow
    -Wdouble-promotion
    -Wformat=2 -Wformat-truncation
    -Wundef
    -fno-common
    -Wno-unused-parameter
    $<$<COMPILE_LANGUAGE:CXX>:
        -Wconversion # STM libraries!
        -Wno-volatile
        -Wold-style-cast
        -Wuseless-cast
        -Wsuggest-override>
    $<$<CONFIG:Debug>:-Og -g3 -ggdb>
    $<$<CONFIG:Release>:-Og -g0>)

target_link_options(${EXECUTABLE} PRIVATE
    -T${MCU_LINKER_SCRIPT}
    ${CPU_PARAMETERS}
    -Wl,-Map=${CMAKE_PROJECT_NAME}.map
    --specs=nosys.specs
    -Wl,--start-group
    -lc
    -lm
    -lstdc++
    -Wl,--end-group
    -Wl,--print-memory-usage)

# The last command can take a couple of seconds on larger project, useful for debugging
add_custom_command(TARGET ${EXECUTABLE} POST_BUILD
    COMMAND ${CMAKE_SIZE} $<TARGET_FILE:${EXECUTABLE}>
    COMMAND ${CMAKE_OBJCOPY} -O ihex $<TARGET_FILE:${EXECUTABLE}> ${EXECUTABLE}.hex
    COMMAND ${CMAKE_OBJCOPY} -O binary $<TARGET_FILE:${EXECUTABLE}> ${EXECUTABLE}.bin)

if (${DUMP_ASM})
    add_custom_command(TARGET ${EXECUTABLE} POST_BUILD
        COMMAND ${CMAKE_OBJDUMP} -D $<TARGET_FILE:${EXECUTABLE}> > ${EXECUTABLE}.s)
endif()

